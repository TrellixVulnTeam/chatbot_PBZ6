{"ast":null,"code":"import { scan } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/chat.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction ChatEngComponent_ng_container_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const message_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r1.content, \" \");\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"from\": a0,\n    \"to\": a1\n  };\n};\n\nfunction ChatEngComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 4);\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵtemplate(2, ChatEngComponent_ng_container_2_div_2_Template, 2, 1, \"div\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r0.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(3, _c0, message_r1.sentBy === \"bot\", message_r1.sentBy === \"user\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngSwtchCase\", \"red\");\n  }\n}\n\n;\nexport class ChatEngComponent {\n  constructor(chat) {\n    this.chat = chat;\n  }\n\n  ngOnInit() {\n    // var val = \"friday\";\n    // var val = {\n    // \"text\": \"friday\"\n    // };\n    // this.chat.talk(val).subscribe(res => console.log(res));\n    // Appends to array after each new message is added to feedSource\n    this.messages = this.chat.conversation.asObservable().pipe(scan((acc, val) => acc.concat(val)));\n  }\n\n  sendMessage() {\n    var cht = {\n      text: this.formValue\n    };\n    this.chat.sendMessage(cht).subscribe(res => console.log(res));\n    this.chat.converse(cht);\n    this.formValue = \"\";\n  }\n\n}\n\nChatEngComponent.ɵfac = function ChatEngComponent_Factory(t) {\n  return new (t || ChatEngComponent)(i0.ɵɵdirectiveInject(i1.ChatService));\n};\n\nChatEngComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatEngComponent,\n  selectors: [[\"app-chat-eng\"]],\n  decls: 11,\n  vars: 4,\n  consts: [[3, \"ngSwitch\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"nameField\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"], [3, \"click\"], [3, \"ngSwitch\"], [1, \"message\", 3, \"ngClass\"], [\"style\", \"background-color: skyblue; text-align: right; padding-right: 15px;\", 4, \"ngSwtchCase\"], [2, \"background-color\", \"skyblue\", \"text-align\", \"right\", \"padding-right\", \"15px\"]],\n  template: function ChatEngComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\");\n      i0.ɵɵtext(1, \"Conversation Window\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ChatEngComponent_ng_container_2_Template, 3, 6, \"ng-container\", 0);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementStart(4, \"label\", 1);\n      i0.ɵɵtext(5, \"Type your Message here:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatEngComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.formValue = $event;\n      })(\"keyup.enter\", function ChatEngComponent_Template_input_keyup_enter_6_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"br\");\n      i0.ɵɵelement(8, \"br\");\n      i0.ɵɵelementStart(9, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function ChatEngComponent_Template_button_click_9_listener() {\n        return ctx.sendMessage();\n      });\n      i0.ɵɵtext(10, \"Send\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 2, ctx.messages));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.formValue);\n    }\n  },\n  directives: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i2.NgSwitch, i2.NgClass],\n  pipes: [i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjaGF0LWVuZy5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["D:\\Haji_bhai\\Angular\\testCB\\src\\app\\chat-eng\\chat-eng.component.ts","D:\\Haji_bhai\\Angular\\testCB\\src\\app\\chat-eng\\chat-eng.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChatService, Message } from 'src/app/chat.service';\nimport { Observable } from 'rxjs';\nimport { scan } from 'rxjs/operators';;\n\n@Component({\n  selector: 'app-chat-eng',\n  templateUrl: './chat-eng.component.html',\n  styleUrls: ['./chat-eng.component.css']\n})\nexport class ChatEngComponent implements OnInit {\n\n\n  messages!: Observable<Message[]>;\n  formValue!: any;\n  text!: any;\n  cht:any;\n\n  constructor(private chat: ChatService) { }\n\n  ngOnInit(): void {\n      // var val = \"friday\";\n\n      // var val = {\n        // \"text\": \"friday\"\n      // };\n      // this.chat.talk(val).subscribe(res => console.log(res));\n\n\n      // Appends to array after each new message is added to feedSource\n      this.messages = this.chat.conversation.asObservable()\n      .pipe(scan((acc, val) => acc.concat(val)));\n\n  }\n  \n  sendMessage() {\n    var cht = {text:this.formValue};\n    this.chat.sendMessage(cht).subscribe(res => console.log(res))\n    this.chat.converse(cht);\n\n    this.formValue = \"\";\n  }\n\n}\n\n\n// sendMessage() {\n//   this.chat.converse(this.formValue);\n\n//   this.formValue = \"\";\n// }","<h3>Conversation Window</h3>\n\n\n<ng-container [ngSwitch]=\"color\" *ngFor=\"let message of messages | async\">\n\n    <div class=\"message\" [ngClass]=\"{ 'from': message.sentBy === 'bot',\n                                        'to': message.sentBy === 'user' }\">\n        <div style=\"background-color: skyblue; text-align: right; padding-right: 15px;\" *ngSwtchCase=\"'red'\">\n            {{ message.content }}\n        </div>\n        \n    </div>\n\n</ng-container>\n\n<label for=\"nameField\">Type your Message here:</label>\n\n<input [(ngModel)]=\"formValue\" (keyup.enter)=\"sendMessage()\" type=\"text\"><br><br>\n\n<button (click)=\"sendMessage()\">Send</button>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}