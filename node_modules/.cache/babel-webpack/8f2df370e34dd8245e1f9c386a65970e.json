{"ast":null,"code":"import { scan } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/chat.service\";\nimport * as i2 from \"@angular/common\";\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"from\": a0,\n    \"to\": a1\n  };\n};\n\nfunction ChatEngComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const message_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(1, _c0, message_r1.sentBy === \"bot\", message_r1.sentBy === \"user\"));\n  }\n}\n\n;\nexport class ChatEngComponent {\n  constructor(chat) {\n    this.chat = chat;\n  }\n\n  ngOnInit() {\n    // var val = \"friday\";\n    // var val = {\n    // \"text\": \"friday\"\n    // };\n    // this.chat.talk(val).subscribe(res => console.log(res));\n    // Appends to array after each new message is added to feedSource\n    this.messages = this.chat.conversation.asObservable().pipe(scan((acc, val) => acc.concat(val)));\n  }\n\n  sendMessage() {\n    this.chat.converse(this.formValue);\n    this.formValue = '';\n  }\n\n}\n\nChatEngComponent.ɵfac = function ChatEngComponent_Factory(t) {\n  return new (t || ChatEngComponent)(i0.ɵɵdirectiveInject(i1.ChatService));\n};\n\nChatEngComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatEngComponent,\n  selectors: [[\"app-chat-eng\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [1, \"message\", 3, \"ngClass\"]],\n  template: function ChatEngComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Conversation Window\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, ChatEngComponent_ng_container_2_Template, 2, 4, \"ng-container\", 0);\n      i0.ɵɵpipe(3, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 1, ctx.messages));\n    }\n  },\n  directives: [i2.NgForOf, i2.NgClass],\n  pipes: [i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjaGF0LWVuZy5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["D:\\Haji_bhai\\Angular\\testCB\\src\\app\\chat-eng\\chat-eng.component.ts","D:\\Haji_bhai\\Angular\\testCB\\src\\app\\chat-eng\\chat-eng.component.html"],"names":[],"mappings":"AAGA,SAAS,IAAT,QAAqB,gBAArB;;;;;;;;;;;;;;ACAA,IAAA,EAAA,CAAA,uBAAA,CAAA,CAAA;AAEI,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AAKJ,IAAA,EAAA,CAAA,qBAAA;;;;;AALyB,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,EAAA,CAAA,eAAA,CAAA,CAAA,EAAA,GAAA,EAAA,UAAA,CAAA,MAAA,KAAA,KAAA,EAAA,UAAA,CAAA,MAAA,KAAA,MAAA,CAAA;;;;ADFa;AAOtC,OAAM,MAAO,gBAAP,CAAuB;AAK3B,EAAA,WAAA,CAAoB,IAApB,EAAqC;AAAjB,SAAA,IAAA,GAAA,IAAA;AAAsB;;AAE1C,EAAA,QAAQ,GAAA;AACJ;AAEA;AACE;AACF;AACA;AAGA;AACA,SAAK,QAAL,GAAgB,KAAK,IAAL,CAAU,YAAV,CAAuB,YAAvB,GACf,IADe,CACV,IAAI,CAAC,CAAC,GAAD,EAAM,GAAN,KAAc,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAf,CADM,CAAhB;AAGH;;AAED,EAAA,WAAW,GAAA;AACT,SAAK,IAAL,CAAU,QAAV,CAAmB,KAAK,SAAxB;AACA,SAAK,SAAL,GAAiB,EAAjB;AACD;;AAzB0B;;;mBAAhB,gB,EAAgB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,WAAA,C;AAAA,C;;;QAAhB,gB;AAAgB,EAAA,SAAA,EAAA,CAAA,CAAA,cAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,SAAA,EAAA,CAAA,EAAA,SAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,yBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACV7B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,IAAA;AAAI,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,qBAAA;AAAmB,MAAA,EAAA,CAAA,YAAA;AAGvB,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,wCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,cAAA,EAAA,CAAA;;;;;AAAkC,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,EAAA,CAAA,WAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,QAAA,CAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ChatService, Message } from 'src/app/chat.service';\nimport { Observable } from 'rxjs';\nimport { scan } from 'rxjs/operators';;\n\n@Component({\n  selector: 'app-chat-eng',\n  templateUrl: './chat-eng.component.html',\n  styleUrls: ['./chat-eng.component.css']\n})\nexport class ChatEngComponent implements OnInit {\n\n  messages: Observable<Message[]> | undefined;\n  formValue!: string;\n\n  constructor(private chat: ChatService) { }\n\n  ngOnInit(): void {\n      // var val = \"friday\";\n\n      // var val = {\n        // \"text\": \"friday\"\n      // };\n      // this.chat.talk(val).subscribe(res => console.log(res));\n\n\n      // Appends to array after each new message is added to feedSource\n      this.messages = this.chat.conversation.asObservable()\n      .pipe(scan((acc, val) => acc.concat(val)));\n\n  }\n  \n  sendMessage() {\n    this.chat.converse(this.formValue);\n    this.formValue = '';\n  }\n\n}\n","<h1>Conversation Window</h1>\n\n\n<ng-container *ngFor=\"let message of messages | async\">\n\n    <div class=\"message\" [ngClass]=\"{ 'from': message.sentBy === 'bot',\n                                        'to': message.sentBy === 'user' }\">\n\n    </div>\n\n</ng-container>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}